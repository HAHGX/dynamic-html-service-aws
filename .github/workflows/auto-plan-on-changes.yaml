name: Auto Terraform Plan on Infrastructure Changes

on:
  pull_request:
    branches: [ main, feature/*, bugfix/*, hotfix/* ]
    paths:
      - 'infra/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.envs.outputs.environments }}
    steps:
      - name: Set environments
        id: envs
        run: |
          echo "environments=[\"development\",\"staging\",\"production\"]" >> $GITHUB_OUTPUT

  plan-all-environments:
    needs: detect-changes
    strategy:
      matrix:
        environment: ${{ fromJson(needs.detect-changes.outputs.environments) }}
      fail-fast: false
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::942010118656:role/HandsonTerraformBackendRole
          aws-region: us-east-2

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=infra.handson.com" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=us-east-2" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=terraform-state-lock"
        working-directory: ./infra/aws
        continue-on-error: true

      - name: Select/Create Terraform Workspace
        if: steps.init.outcome == 'success'
        id: workspace
        run: |
          terraform workspace select ${{ matrix.environment }} || \
          terraform workspace new ${{ matrix.environment }}
          echo "Current workspace: $(terraform workspace show)"
        working-directory: ./infra/aws
        continue-on-error: true

      - name: Terraform Plan
        if: steps.workspace.outcome == 'success'
        id: plan
        run: |
          PLAN_OUTPUT=$(terraform plan -no-color 2>&1)
          PLAN_EXIT_CODE=$?
          
          # Store plan output in environment variable for comment
          {
            echo "plan_output<<EOF"
            echo "$PLAN_OUTPUT"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          
          echo "exit_code=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Exit with the same code as terraform plan
          exit $PLAN_EXIT_CODE
        working-directory: ./infra/aws
        continue-on-error: true

      - name: Determine deployment commands
        id: deploy-commands
        run: |
          ENV="${{ matrix.environment }}"
          
          if [ "$ENV" = "development" ]; then
            echo "deploy_cmd=Comment \`terraform apply\` in this PR to deploy to development" >> $GITHUB_OUTPUT
            echo "auto_deploy=true" >> $GITHUB_OUTPUT
          elif [ "$ENV" = "staging" ]; then
            echo "deploy_cmd=Comment \`terraform apply -workspace=staging\` in this PR to deploy to staging" >> $GITHUB_OUTPUT
            echo "auto_deploy=false" >> $GITHUB_OUTPUT
          else
            echo "deploy_cmd=Go to Actions ‚Üí Deploy Production ‚Üí Run with \`apply\` action (requires CONFIRM)" >> $GITHUB_OUTPUT
            echo "auto_deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Create PR Comment Content
        if: github.event_name == 'pull_request' && always()
        id: comment-content
        env:
          PLAN_OUTPUT: ${{ steps.plan.outputs.plan_output }}
        run: |
          ENV="${{ matrix.environment }}"
          INIT_STATUS="${{ steps.init.outcome }}"
          WORKSPACE_STATUS="${{ steps.workspace.outcome }}"
          PLAN_STATUS="${{ steps.plan.outcome }}"
          COMMIT="${{ github.sha }}"
          DEPLOY_CMD="${{ steps.deploy-commands.outputs.deploy_cmd }}"
          
          # Start building the comment
          {
            echo "comment_body<<EOF"
            echo "## üèóÔ∏è Infrastructure Changes Detected - \`$ENV\` Environment"
            echo ""
            echo "**Environment:** \`$ENV\`"
            echo "**Terraform Init:** $([ "$INIT_STATUS" = "success" ] && echo "‚úÖ Success" || echo "‚ùå Failed")"
            echo "**Workspace Setup:** $([ "$WORKSPACE_STATUS" = "success" ] && echo "‚úÖ Success" || echo "‚ùå Failed")"
            echo "**Plan Status:** $([ "$PLAN_STATUS" = "success" ] && echo "‚úÖ Success" || echo "‚ùå Failed")"
            echo "**Commit:** \`$COMMIT\`"
            echo ""
            
            # Plan success section
            if [ "$PLAN_STATUS" = "success" ]; then
              echo "### üìã Terraform Plan Results"
              echo "<details>"
              echo "<summary>üîç View Plan for $ENV</summary>"
              echo ""
              echo "\`\`\`terraform"
              echo "$PLAN_OUTPUT"
              echo "\`\`\`"
              echo "</details>"
              echo ""
              echo "### üöÄ Next Steps for $ENV:"
              echo "$DEPLOY_CMD"
              echo ""
            fi
            
            # Plan failure section
            if [ "$PLAN_STATUS" = "failure" ]; then
              echo "### ‚ùå Plan Failed"
              echo "<details>"
              echo "<summary>View Plan Error</summary>"
              echo ""
              echo "\`\`\`"
              echo "$PLAN_OUTPUT"
              echo "\`\`\`"
              echo "</details>"
              echo ""
            fi
            
            echo "---"
            echo "*Auto-generated from infrastructure changes detection*"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Comment Plan Results on PR
        if: github.event_name == 'pull_request' && always()
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.comment-content.outputs.comment_body }}

  summary-comment:
    if: github.event_name == 'pull_request'
    needs: [detect-changes, plan-all-environments]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Create Summary Comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## üìä Infrastructure Changes Summary
            
            üîç **Changes detected in:** `infra/` directory
            
            ### üåç Environment Plans:
            - üü¢ **Development**: Ready for deployment via PR comment
            - üü° **Staging**: Manual deployment via PR comment  
            - üî¥ **Production**: Manual deployment via Actions (requires confirmation)
            
            ### üéØ Quick Deploy Guide:
            
            #### For Development:
            ```
            terraform apply
            ```
            
            #### For Staging:
            ```
            terraform apply -workspace=staging
            ```
            
            #### For Production:
            1. Go to **Actions** ‚Üí **Deploy Production**
            2. Click **Run workflow**
            3. Select action: `apply`
            4. Type `CONFIRM` in confirmation field
            5. Click **Run workflow**
            
            ---
            üí° **Tip:** Always review the plan outputs above before deploying to any environment!
